#include <cstdio>
#include <iostream>
#include <cstring>
#include <cmath>
#include <ctime>
#include <cstdlib>
#include <string>
#include <stack>
#include <queue>
#include <vector>
#include <algorithm>
#include <map>
#include <set>
#define inf 2147483647
using namespace std;
inline void read(int &x) {
    x = 0;
    char t = getchar();
    bool f = 0;
    while (t < '0' || t > '9') {
        if (t == '-')
            f = 1;
        t = getchar();
    }
    while (t >= '0' && t <= '9') {
        x = (x << 3) + (x << 1) + t - '0';
        t = getchar();
    }
    if (f)
        x = -x;
}
struct xb {
    int v, num;
};
int c[100010];
xb yby[100010];
int temp[100010];
int longtao[100010];
int rank_ans;
int pre_ans, succ_ans;
int k, l, r;
int n, m, i;
int opt, a, b, pos, x;
void merge(int, int, int);
struct node {
    int key;
    int size, num;
    node *ch[2];
    void make(int x) {
        key = yby[x].v;
        size = num = yby[x].num;
        ch[0] = ch[1] = NULL;
    }
    void maintain() {
        size = num;
        if (ch[0] != NULL)
            size += ch[0]->size;
        if (ch[1] != NULL)
            size += ch[1]->size;
    }
};
void rotate(node *&, bool);
void insert(node *&, int);
void del(node *&, int);
void unit(int, int, node *&);
void bst_build(node *&, int, int, int);
int bst_rank(node *, int);
void bst_pre(node *, int);
void bst_succ(node *, int);
struct sgt {
    node *p[200010];
    void build(int o, int l, int r) {
        int mid = (l + r) >> 1;
        if (l < r) {
            int lson = o << 1;
            int rson = lson | 1;
            build(lson, l, mid);
            build(rson, mid + 1, r);
        }
        merge(l, r, mid);
        p[o] = NULL;
        unit(l, r, p[o]);
    }
    void rank(int o, int l, int r) {
        if (l >= a && r <= b)
            rank_ans += bst_rank(p[o], x) - 1;
        else {
            int mid = (l + r) >> 1;
            int lson = o << 1;
            int rson = lson | 1;
            if (a <= mid)
                rank(lson, l, mid);
            if (b > mid)
                rank(rson, mid + 1, r);
        }
    }
    void update(int o, int l, int r) {
        del(p[o], c[pos]);
        insert(p[o], x);
        if (l < r) {
            int mid = (l + r) >> 1;
            int lson = o << 1;
            int rson = lson | 1;
            if (pos <= mid)
                update(lson, l, mid);
            else
                update(rson, mid + 1, r);
        }
    }
    void pre(int o, int l, int r) {
        if (l >= a && r <= b)
            bst_pre(p[o], x);
        else {
            int mid = (l + r) >> 1;
            int lson = o << 1;
            int rson = lson | 1;
            if (a <= mid)
                pre(lson, l, mid);
            if (b > mid)
                pre(rson, mid + 1, r);
        }
    }
    void succ(int o, int l, int r) {
        if (l >= a && r <= b)
            bst_succ(p[o], x);
        else {
            int mid = (l + r) >> 1;
            int lson = o << 1;
            int rson = lson | 1;
            if (a <= mid)
                succ(lson, l, mid);
            if (b > mid)
                succ(rson, mid + 1, r);
        }
    }
} tree;
int main() {
    srand(time(0));
    read(n);
    read(m);
    for (i = 1; i <= n; i++) {
        read(c[i]);
        temp[i] = c[i];
    }
    tree.build(1, 1, n);
    for (i = 1; i <= m; i++) {
        read(opt);
        switch (opt) {
            case 1: {
                read(a);
                read(b);
                read(x);
                rank_ans = 1;
                tree.rank(1, 1, n);
                printf("%d\n", rank_ans);
                break;
            }
            case 2: {
                read(a);
                read(b);
                read(k);
                l = 0;
                r = 100000000;
                x = (l + r + 1) >> 1;
                while (l < r) {
                    rank_ans = 1;
                    tree.rank(1, 1, n);
                    if (rank_ans > k)
                        r = x - 1;
                    else
                        l = x;
                    x = (l + r + 1) >> 1;
                }
                printf("%d\n", x);
                break;
            }
            case 3: {
                read(pos);
                read(x);
                tree.update(1, 1, n);
                c[pos] = x;
                break;
            }
            case 4: {
                read(a);
                read(b);
                read(x);
                pre_ans = -inf;
                tree.pre(1, 1, n);
                printf("%d\n", pre_ans);
                break;
            }
            case 5: {
                read(a);
                read(b);
                read(x);
                succ_ans = inf;
                tree.succ(1, 1, n);
                printf("%d\n", succ_ans);
                break;
            }
        }
    }
    return 0;
}
void rotate(node *&p, bool f) {
    node *t = p->ch[f ^ 1];
    p->ch[f ^ 1] = t->ch[f];
    t->ch[f] = p;
    p->maintain();
    t->maintain();
    p = t;
}
void insert(node *&p, int x) {
    if (p == NULL) {
        p = (node *)malloc(sizeof(node));
        p->key = x;
        p->size = p->num = 1;
        p->ch[0] = p->ch[1] = NULL;
        return;
    }
    if (x == p->key) {
        p->size++;
        p->num++;
        return;
    }
    if (x < p->key) {
        insert(p->ch[0], x);
        p->size++;
    } else {
        insert(p->ch[1], x);
        p->size++;
    }
}
void del(node *&p, int x) {
    if (p == NULL)
        return;
    if (x == p->key) {
        if (p->num > 1) {
            p->num--;
            p->size--;
            return;
        } else {
            if (p->ch[0] == NULL) {
                node *t = p;
                p = p->ch[1];
                free(t);
                return;
            } else if (p->ch[1] == NULL) {
                node *t = p;
                p = p->ch[0];
                free(t);
                return;
            } else {
                bool f = rand() & 1;
                rotate(p, f);
                del(p->ch[f], x);
                p->size--;
            }
        }
    } else {
        if (x < p->key)
            del(p->ch[0], x);
        else
            del(p->ch[1], x);
        p->size--;
    }
}
void unit(int l, int r, node *&root) {
    int i;
    int p_yby = 1;
    yby[1].v = temp[l];
    yby[1].num = 1;
    for (i = l + 1; i <= r; i++) {
        if (temp[i] == yby[p_yby].v)
            yby[p_yby].num++;
        else {
            p_yby++;
            yby[p_yby].v = temp[i];
            yby[p_yby].num = 1;
        }
    }
    bst_build(root, 1, p_yby, (1 + p_yby) >> 1);
}
void bst_build(node *&p, int l, int r, int mid) {
    p = (node *)malloc(sizeof(node));
    p->make(mid);
    if (mid - 1 >= l)
        bst_build(p->ch[0], l, mid - 1, (l + mid - 1) >> 1);
    if (mid + 1 <= r)
        bst_build(p->ch[1], mid + 1, r, (mid + 1 + r) >> 1);
    p->maintain();
}
int bst_rank(node *p, int x) {
    if (p == NULL)
        return 1;
    int s = 0;
    if (p->ch[0] != NULL)
        s = p->ch[0]->size;
    if (x < p->key)
        return bst_rank(p->ch[0], x);
    else if (x == p->key)
        return s + 1;
    else
        return s + p->num + bst_rank(p->ch[1], x);
}
void merge(int head, int tail, int mid) {
    if (head == tail)
        return;
    int p1 = head, p2 = mid + 1, ph = head;
    while (p1 <= mid && p2 <= tail) {
        if (temp[p1] < temp[p2]) {
            longtao[ph] = temp[p1];
            p1++;
            ph++;
        } else {
            longtao[ph] = temp[p2];
            p2++;
            ph++;
        }
    }
    while (p1 <= mid) {
        longtao[ph] = temp[p1];
        p1++;
        ph++;
    }
    while (p2 <= tail) {
        longtao[ph] = temp[p2];
        p2++;
        ph++;
    }
    for (i = head; i <= tail; i++) temp[i] = longtao[i];
}
void bst_pre(node *p, int x) {
    if (p == NULL)
        return;
    if (p->key < x) {
        pre_ans = max(pre_ans, p->key);
        bst_pre(p->ch[1], x);
    } else
        bst_pre(p->ch[0], x);
}
void bst_succ(node *p, int x) {
    if (p == NULL)
        return;
    if (p->key > x) {
        succ_ans = min(succ_ans, p->key);
        bst_succ(p->ch[0], x);
    } else
        bst_succ(p->ch[1], x);
}
